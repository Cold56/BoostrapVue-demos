{"ast":null,"code":"export default {\n  data() {\n    return {\n      testInput: '',\n      afterSubmit: '',\n      checkbox1: 'not_accepted',\n      showAlert: false,\n      // 控制b-alert显示的属性\n      alertType: 'success',\n      color: [] // 如果是多选用这个，如果是单选用{}或者null\n    };\n  },\n  methods: {\n    onSubmit(evt) {\n      evt.preventDefault();\n      if (this.testInput !== '') {\n        this.afterSubmit = this.testInput; // 更新要显示的信息\n        this.alertType = 'success';\n      } else {\n        this.afterSubmit = 'You have not input anything!';\n        this.alertType = 'warning';\n      }\n      if (this.checkbox1 === 'accepted') {\n        this.showAlert = true; // 显示b-alert\n      }\n    },\n    onReset(evt) {\n      evt.preventDefault();\n      this.testInput = '';\n      this.afterSubmit = '';\n      this.showAlert = false; // 隐藏b-alert\n    },\n    checkAll() {\n      // 所有可用的颜色\n      const allColors = ['green', 'yellow', 'red', 'white', 'grey', 'all'];\n\n      // 检查 'all' 复选框是否被选中\n      if (this.color.includes('all')) {\n        // 如果 'all' 被选中，选择所有颜色\n        this.color = allColors;\n      } else {\n        this.color = [];\n      }\n    }\n  },\n  watch: {\n    // 监视 color 数组的变化\n    color(newVal, oldVal) {\n      // 如果 color 数组包含 'all' 或者 color 数组的长度不等于所有颜色的数量\n      // 则取消 'all' 复选框的选中状态\n      if (!newVal.includes('all') && newVal.length === 5) {\n        this.color = newVal.unshift('all');\n      } else {\n        // 否则，确保 'all' 复选框被选中\n        this.color = [...newVal, 'all'];\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","testInput","afterSubmit","checkbox1","showAlert","alertType","color","methods","onSubmit","evt","preventDefault","onReset","checkAll","allColors","includes","watch","newVal","oldVal","length","unshift"],"sources":["src/views/FormView.vue"],"sourcesContent":["<template>\n  <b-container>\n    <b-form @submit=\"onSubmit\" @reset=\"onReset\">\n      <!-- 输入框 -->\n      <b-form-input v-model=\"testInput\" type=\"text\" placeholder=\"Plz type here!\" class=\"mb-2\"></b-form-input>\n      <!-- 复选框，并使用value指定选中和不选中的值 -->\n      <b-form-checkbox v-model=\"checkbox1\" value=\"accepted\" unchecked-value=\"not_accepted\">I accept the terms and\n        use</b-form-checkbox>\n      <b-button type=\"submit\" class=\"mr-2\" variant=\"success\">Submit!</b-button>\n      <b-button type=\"reset\" class=\"mr-2\" variant=\"outline-danger\">Reset!</b-button>\n    </b-form>\n    <hr />\n    <p v-if=\"checkbox1 === 'accepted'\">This is what you have inputed:&emsp;{{ testInput }}</p>\n    <p v-else>Plz accept the terms first</p>\n    <hr />\n    <!-- 使用:show来根据showAlert的值显示或隐藏b-alert -->\n    <b-alert :show=\"showAlert\" :variant=\"alertType\">{{ afterSubmit }}</b-alert>\n    <hr />\n\n    <!-- 复选框组合，用来产生爱好列表 -->\n    <b-form-checkbox-group v-model=\"color\">\n      <b-form-fieldset>Pick the colors you prefer</b-form-fieldset>\n      <b-form-checkbox style=\"background-color:green\" value=\"green\">Green</b-form-checkbox>\n      <b-form-checkbox style=\"background-color:yellow\" value=\"yellow\">Yellow</b-form-checkbox>\n      <b-form-checkbox style=\"background-color:red\" value=\"red\">Red</b-form-checkbox>\n      <b-form-checkbox value=\"white\">White</b-form-checkbox>\n      <b-form-checkbox style=\"background-color:grey\" value=\"grey\">grey</b-form-checkbox>\n      <b-form-checkbox value=\"all\" @change=\"checkAll\">all</b-form-checkbox>\n    </b-form-checkbox-group>\n    <p v-if=\"color.length !== 0 && !color.includes('all')\">{{ color }}</p>\n    <p v-if=\"color.includes('all')\">all</p>\n  </b-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      testInput: '',\n      afterSubmit: '',\n      checkbox1: 'not_accepted',\n      showAlert: false, // 控制b-alert显示的属性\n      alertType: 'success',\n      color: [],// 如果是多选用这个，如果是单选用{}或者null\n    }\n  },\n  methods: {\n    onSubmit(evt) {\n      evt.preventDefault();\n      if (this.testInput !== '') {\n        this.afterSubmit = this.testInput; // 更新要显示的信息\n        this.alertType = 'success'\n      } else {\n        this.afterSubmit = 'You have not input anything!';\n        this.alertType = 'warning';\n      }\n      if (this.checkbox1 === 'accepted') {\n        this.showAlert = true; // 显示b-alert\n      }\n    },\n    onReset(evt) {\n      evt.preventDefault();\n      this.testInput = '';\n      this.afterSubmit = '';\n      this.showAlert = false; // 隐藏b-alert\n    },\n    checkAll() {\n      // 所有可用的颜色\n      const allColors = ['green', 'yellow', 'red', 'white', 'grey', 'all'];\n\n      // 检查 'all' 复选框是否被选中\n      if (this.color.includes('all')) {\n        // 如果 'all' 被选中，选择所有颜色\n        this.color = allColors;\n      } else {\n        this.color = [];\n      }\n    }\n  },\n  watch: {\n    // 监视 color 数组的变化\n    color(newVal, oldVal) {\n      // 如果 color 数组包含 'all' 或者 color 数组的长度不等于所有颜色的数量\n      // 则取消 'all' 复选框的选中状态\n      if (!newVal.includes('all') && newVal.length === 5) {\n        this.color = newVal.unshift('all');\n      } else {\n        // 否则，确保 'all' 复选框被选中\n        this.color = [...newVal, 'all'];\n      }\n    }\n  }\n}\n</script>"],"mappings":"AAmCA;EACAA,KAAA;IACA;MACAC,SAAA;MACAC,WAAA;MACAC,SAAA;MACAC,SAAA;MAAA;MACAC,SAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,SAAAC,GAAA;MACAA,GAAA,CAAAC,cAAA;MACA,SAAAT,SAAA;QACA,KAAAC,WAAA,QAAAD,SAAA;QACA,KAAAI,SAAA;MACA;QACA,KAAAH,WAAA;QACA,KAAAG,SAAA;MACA;MACA,SAAAF,SAAA;QACA,KAAAC,SAAA;MACA;IACA;IACAO,QAAAF,GAAA;MACAA,GAAA,CAAAC,cAAA;MACA,KAAAT,SAAA;MACA,KAAAC,WAAA;MACA,KAAAE,SAAA;IACA;IACAQ,SAAA;MACA;MACA,MAAAC,SAAA;;MAEA;MACA,SAAAP,KAAA,CAAAQ,QAAA;QACA;QACA,KAAAR,KAAA,GAAAO,SAAA;MACA;QACA,KAAAP,KAAA;MACA;IACA;EACA;EACAS,KAAA;IACA;IACAT,MAAAU,MAAA,EAAAC,MAAA;MACA;MACA;MACA,KAAAD,MAAA,CAAAF,QAAA,WAAAE,MAAA,CAAAE,MAAA;QACA,KAAAZ,KAAA,GAAAU,MAAA,CAAAG,OAAA;MACA;QACA;QACA,KAAAb,KAAA,OAAAU,MAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}